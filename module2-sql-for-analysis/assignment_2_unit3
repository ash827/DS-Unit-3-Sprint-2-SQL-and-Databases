# -*- coding: utf-8 -*-
"""Assignment 2 PostgreSQL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RaFLSTAwoZ8IeLg27YQqhnMe-g3Vtt4m

POSTGRES DEMO
"""

!pip install psycopg2-binary

import psycopg2

dir(psycopg2)

help(psycopg2.connect)

"""1. Establish connection
2. Cursor
3. Execute query
4. Get RESULTS!
"""

dbname = 'pjesblvg'
user = 'pjesblvg'
password = '25UCcZeM_g2FMLMXFpaB-assOuGMPgB0'
host = 'salt.db.elephantsql.com'

pg_conn = psycopg2.connect(dbname = dbname, user = user, password = password, host = host)
pg_conn

pg_cursor = pg_conn.cursor()
pg_conn.cursor

pg_cursor.execute('SELECT * FROM playground;')
pg_cursor.fetchall()

"""##Working with the rpg database"""

import sqlite3
import pandas as pd


conn = sqlite3.connect('rpg_db (1).sqlite3')

sl_cursor = conn.cursor()

count = sl_cursor.execute('SELECT COUNT(*) FROM charactercreator_character;').fetchall()
count

characters = sl_cursor.execute('SELECT * FROM charactercreator_character').fetchall()
characters

#This shows us the schema

sl_cursor.execute('PRAGMA table_info(charactercreator_character);').fetchall()

create_character_table = '''
CREATE TABLE character_table (
  character_id SERIAL PRIMARY KEY,
  name VARCHAR(100),
  level INT,
  exp INT,
  hp INT,
  strength INT,
  intelligence INT,
  dexterity INT,
  wisdom INT
);
'''

pg_cursor.execute(create_character_table)

pg_cursor.execute("INSERT INTO character_table VALUES (1, 'Aliquid iste optio reiciendi, 0, 0, 10, 1, 1, 1, 1');")

for character in characters:
  print("INSERT INTO character_table VALUES " + str(character) + '.')

"""#Titanic Data for Assignment"""

!wget 'https://raw.githubusercontent.com/ash827/DS-Unit-3-Sprint-2-SQL-and-Databases/master/module2-sql-for-analysis/titanic.csv'

import pandas as pd

df_titanic = pd.read_csv('https://raw.githubusercontent.com/ash827/DS-Unit-3-Sprint-2-SQL-and-Databases/master/module2-sql-for-analysis/titanic.csv')
df_titanic.shape

df_titanic.head()

##I feel like the schema of this is a little off. I would start with the Name, Age, Sex, etc. I will do that now

df_titanic.columns.tolist()

df_titanic = df_titanic.reindex(columns = ['Name', 'Age', 'Sex', 'Pclass', 'Fare', 'Siblings/Spouses Aboard', 'Parents/Children Aboard', 'Survived'])
df_titanic.head()

#The columns are now in a nice order :)

"""##Using sqlite3 with the Titanic data

#Having trouble getting the titanic information to load as a db?
"""

conn = sqlite3.connect('titanic.csv')

ti_cursor = conn.cursor()

count = ti_cursor.execute('SELECT COUNT(*) FROM Name;').fetchall()
count

